import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

#定义模型----------------------------------------------------------------------------
class VGG16(keras.Model):
    def __init__(self):
        super(VGG16, self).__init__()
        
        self.c1 = layers.Conv2D(filters=64, kernel_size=[3, 3], strides=1, padding='same', name='c1')
        self.b1 = layers.BatchNormalization(name='b1')
        self.a1 = layers.Activation('relu', name='a1')
        self.c2 = layers.Conv2D(filters=64, kernel_size=[3, 3], strides=1, padding='same', name='c2')
        self.b2 = layers.BatchNormalization(name='b2')
        self.a2 = layers.Activation('relu', name='a2')
        self.p1 = layers.MaxPool2D(pool_size=[2, 2], strides=2, padding='same', name='p1')
        self.d1 = layers.Dropout(0.2)

        self.c3 = layers.Conv2D(filters=128, kernel_size=[3, 3], strides=1, padding='same', name='c3')
        self.b3 = layers.BatchNormalization(name='b3')
        self.a3 = layers.Activation('relu', name='a3')
        self.c4 = layers.Conv2D(filters=128, kernel_size=[3, 3], strides=1, padding='same', name='c4')
        self.b4 = layers.BatchNormalization(name='b4')
        self.a4 = layers.Activation('relu', name='a4')
        self.p2 = layers.MaxPool2D(pool_size=[2, 2], strides=2, padding='same', name='p2')
        self.d2 = layers.Dropout(0.2)

        self.c5 = layers.Conv2D(filters=256, kernel_size=[3, 3], strides=1, padding='same', name='c5')
        self.b5 = layers.BatchNormalization(name='b5')
        self.a5 = layers.Activation('relu', name='a5')
        self.c6 = layers.Conv2D(filters=256, kernel_size=[3, 3], strides=1, padding='same', name='c6')
        self.b6 = layers.BatchNormalization(name='b6')
        self.a6 = layers.Activation('relu', name='a6')
        self.c7 = layers.Conv2D(filters=256, kernel_size=[3, 3], strides=1, padding='same', name='c7')
        self.b7 = layers.BatchNormalization(name='b7')
        self.a7 = layers.Activation('relu', name='a7')
        self.p3 = layers.MaxPool2D(pool_size=[2, 2], strides=2, padding='same', name='p3')
        self.d3 = layers.Dropout(0.2)

        self.c8 = layers.Conv2D(filters=512, kernel_size=[3, 3], strides=1, padding='same', name='c8')
        self.b8 = layers.BatchNormalization(name='b8')
        self.a8 = layers.Activation('relu', name='a8')
        self.c9 = layers.Conv2D(filters=512, kernel_size=[3, 3], strides=1, padding='same', name='c9')
        self.b9 = layers.BatchNormalization(name='b9')
        self.a9 = layers.Activation('relu', name='a9')
        self.c10 = layers.Conv2D(filters=512, kernel_size=[3, 3], strides=1, padding='same', name='c10')
        self.b10 = layers.BatchNormalization(name='b10')
        self.a10 = layers.Activation('relu', name='a10')
        self.p4 = layers.MaxPool2D(pool_size=[2, 2], strides=2, padding='same', name='p4')
        self.d4 = layers.Dropout(0.2)

        self.c11 = layers.Conv2D(filters=512, kernel_size=[3, 3], strides=1, padding='same', name='c11')
        self.b11 = layers.BatchNormalization(name='b11')
        self.a11 = layers.Activation('relu', name='a11')
        self.c12 = layers.Conv2D(filters=512, kernel_size=[3, 3], strides=1, padding='same', name='c12')
        self.b12 = layers.BatchNormalization(name='b12')
        self.a12 = layers.Activation('relu', name='a12')
        self.c13 = layers.Conv2D(filters=512, kernel_size=[3, 3], strides=1, padding='same', name='c13')
        self.b13 = layers.BatchNormalization(name='b13')
        self.a13 = layers.Activation('relu', name='a13')
        self.p5 = layers.MaxPool2D(pool_size=[2, 2], strides=2, padding='same', name='p5')
        self.d5 = layers.Dropout(0.2)
        
        self.flatten = layers.Flatten()

        self.f1 = layers.Dense(512, activation='relu', name='f1')
        self.d6 = layers.Dropout(0.2)
        self.f2 = layers.Dense(512, activation='relu', name='f2')
        self.d7 = layers.Dropout(0.2)
        self.f3 = layers.Dense(10, activation='softmax', name='f3')
        
    def call(self, inputs, training=None):
        x = self.c1(inputs)
        x = self.b1(x, training=training)
        x = self.a1(x)
        x = self.c2(x)
        x = self.b2(x, training=training)
        x = self.a2(x)
        x = self.p1(x)
        x = self.d1(x, training=training)

        x = self.c3(x)
        x = self.b3(x, training=training)
        x = self.a3(x)
        x = self.c4(x)
        x = self.b4(x, training=training)
        x = self.a4(x)
        x = self.p2(x)
        x = self.d2(x, training=training)

        x = self.c5(x)
        x = self.b5(x, training=training)
        x = self.a5(x)
        x = self.c6(x)
        x = self.b6(x, training=training)
        x = self.a6(x)
        x = self.c7(x)
        x = self.b7(x, training=training)
        x = self.a7(x)
        x = self.p3(x)
        x = self.d3(x, training=training)

        x = self.c8(x)
        x = self.b8(x, training=training)
        x = self.a8(x)
        x = self.c9(x)
        x = self.b9(x, training=training)
        x = self.a9(x)
        x = self.c10(x)
        x = self.b10(x, training=training)
        x = self.a10(x)
        x = self.p4(x)
        x = self.d4(x, training=training)

        x = self.c11(x)
        x = self.b11(x, training=training)
        x = self.a11(x)
        x = self.c12(x)
        x = self.b12(x, training=training)
        x = self.a12(x)
        x = self.c13(x)
        x = self.b13(x, training=training)
        x = self.a13(x)
        x = self.p5(x)
        x = self.d5(x, training=training)

        x = self.flatten(x)
        x = self.f1(x)
        x = self.d6(x, training=training)
        x = self.f2(x)
        x = self.d7(x, training=training)
        y = self.f3(x)
        return y
# #------------------------------------------------------------------------------------